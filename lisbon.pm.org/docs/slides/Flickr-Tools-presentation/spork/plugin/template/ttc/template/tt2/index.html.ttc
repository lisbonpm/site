use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.14
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1132078922',
        'name' => 'index.html',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- BEGIN index -->\n";
    #line 2 "template/tt2/index.html"
    $output .=  $context->include('top.html');
    $output .=  "\n<div id=\"content\">\n<div class=\"top_spacer\"></div>\n<ol>\n";
    #line 8 "template/tt2/index.html"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('slides');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'slide'} = $value;
    $output .=  "<li><a href=\"";
    #line 7 "template/tt2/index.html"
    $output .=  $stash->get(['slide', 0, 'slide_name', 0]);
    $output .=  "\">";
    #line 7 "template/tt2/index.html"
    $output .=  $stash->get(['slide', 0, 'slide_heading', 0]);
    $output .=  "</a></li>\n";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "</ol>\n</div>\n";
    #line 11 "template/tt2/index.html"
    $output .=  $context->include('bottom.html');
    $output .=  "\n<!-- END index -->\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
